/**
 * This class is generated by jOOQ
 */
package com.github.gtmelo.sistci_api.data.tables;


import com.github.gtmelo.sistci_api.data.Keys;
import com.github.gtmelo.sistci_api.data.Sistci;
import com.github.gtmelo.sistci_api.data.tables.records.CategoriaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Categoria extends TableImpl<CategoriaRecord> {

    private static final long serialVersionUID = -2093983873;

    /**
     * The reference instance of <code>sistci.categoria</code>
     */
    public static final Categoria CATEGORIA = new Categoria();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoriaRecord> getRecordType() {
        return CategoriaRecord.class;
    }

    /**
     * The column <code>sistci.categoria.id</code>.
     */
    public final TableField<CategoriaRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistci.categoria.categoria</code>.
     */
    public final TableField<CategoriaRecord, String> CATEGORIA_ = createField("categoria", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>sistci.categoria</code> table reference
     */
    public Categoria() {
        this("categoria", null);
    }

    /**
     * Create an aliased <code>sistci.categoria</code> table reference
     */
    public Categoria(String alias) {
        this(alias, CATEGORIA);
    }

    private Categoria(String alias, Table<CategoriaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Categoria(String alias, Table<CategoriaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sistci.SISTCI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CategoriaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CATEGORIA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CategoriaRecord> getPrimaryKey() {
        return Keys.KEY_CATEGORIA_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CategoriaRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoriaRecord>>asList(Keys.KEY_CATEGORIA_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Categoria as(String alias) {
        return new Categoria(alias, this);
    }

    /**
     * Rename this table
     */
    public Categoria rename(String name) {
        return new Categoria(name, null);
    }
}
